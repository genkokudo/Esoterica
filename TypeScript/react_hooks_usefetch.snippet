<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>react_hooks_usefetch</Title>
      <Author>Y.Toyoda</Author>
      <Description>fetchを使うパターンのナウい画面実装です。</Description>
      <HelpUrl>www.microsoft.com</HelpUrl>
      <Shortcut>react_hooks_usefetch</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>SimpleCounter</ID>
          <ToolTip>名前Pascal</ToolTip>
          <Default>SimpleCounter</Default>
        </Literal>
        <Literal>
          <ID>simpleCounter</ID>
          <ToolTip>名前Camel</ToolTip>
          <Default>simpleCounter</Default>
        </Literal>
        <Literal>
          <ID>simple-counter</ID>
          <ToolTip>名前ハイフン繋ぎ</ToolTip>
          <Default>simple-counter</Default>
        </Literal>
      </Declarations>
      <Code Language="TypeScript" Kind="any" Delimiter="#">
      <![CDATA[
// -------------------- #SimpleCounter#.ts --------------------
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

// state
// サーバのフィールドと自動マッピングされるが、対応するのはPascalとCamelだけで、途中が大文字小文字違いの単語は認識されない
// 例：LabelとlabelはOK、YMaxとymaxはダメで、yMaxはOK
export interface #SimpleCounter#State {
    // サーバからのデータ、この形にサーバのResultクラスを作成する
    message: string;
    error: string;
    data: string[];
    // もし、interfaceの配列を使用する場合：正しく読めないことがあるので、JSON.parse(JSON.stringify(datasets))で読み直して使用すること

    isEdited: boolean;  // この画面で編集していたらtrue
    postTrigger: number;// この値が変化したらPostする
}

// 初期値
const #simpleCounter#InitialState: #SimpleCounter#State = {
    message: '',
    error: '',
    data: [],

    isEdited: false,
    postTrigger: 0
};

// createSlice() の中では、stateの更新を行っても良い（他ではだめ）
// 同じ画面で同じhooksを複数使用する場合、このSliceを複数にすること。同じStateを呼んでしまい、エラーになるため。
export let #SimpleCounter#Module = createSlice({
    name: "#simpleCounter#",
    initialState: #simpleCounter#InitialState,
    reducers:   // 処理の定義
    {
        // Fetchしたデータをstateに反映させる
        setData: (state, action: PayloadAction<#SimpleCounter#State>) => {
            if (action.payload) {
                state.message = action.payload.message;
                state.error = action.payload.error;
                //state.data = action.payload.data;
                state.isEdited = false;
            }
            return state;
        },
        // 任意の値編集例
        //editParamater: (state, action: PayloadAction<{ id: string, text: string }>) => {
        //    // state.datasets[Number(action.payload.id)].cmmpOpsHistoryFieldName = action.payload.text; // 配列の場合はこっち
        //    state.paramater = action.payload.text;
        //    state.isEdited = true;
        //    return state;
        //},
        // サーバに送信する
        // 送信データのセットはtsxに記述する
        // postTriggerを変更するとサーバにPostされる仕組み
        submit: (state) => {
            state.postTrigger++;
            return state;
        }
    }
});


// -------------------- #SimpleCounter#.tsx --------------------
import * as React from 'react';
import { useEffect, useMemo } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { #SimpleCounter#Module, #SimpleCounter#State } from '../store/#SimpleCounter#';
import { Container, Row, Col, Button } from 'reactstrap';
import { useFetch } from '../store/useFetch';   // react_export_usefetch

// 引数の定義
interface #SimpleCounter#Props {
    aaaa: number;
    bbbb?: string;  // 必須でない場合は?を付ける
}

/*
 * △△画面の表示
 * ↓呼び方
 * <Route path='/#simple-counter#' render={props => <#SimpleCounter# aaaa={34} {...props} />}/>
 * ↓こっちで呼んだ場合でもpropsはnullにならず、aaaaとかがnullになってるので判定するとき注意
 * <Route path='/#simple-counter#' component={#SimpleCounter#} />
 * 
 * ・パラメータ付ける場合
 * <Route path='/#simple-counter#/:id' component={#SimpleCounter#} />
 * ・URLパラメータを使う場合
 * （アドレス）?id=aaaa&name=bbbb
 */
const #SimpleCounter# = (props: Partial<#SimpleCounter#Props>) => {
    // hooksセットアップ
    const dispatch = useDispatch();

    //// パラメータを使用する(URLパラメータの場合はuseLocation)
    //const { id } = useParams();

    // state取得
    const stateData: #SimpleCounter#State = useSelector((state: any) => state.#simpleCounter#);

    // 初回および、サーバ送信データ作成時に実行
    // データ取得するためのパラメータ作成
    const opts = useMemo(() => {
        // 編集データを取得する
        var formData = new FormData();
        //formData.append('userId', id);
        if (stateData.postTrigger > 0) {
            // 初回ではない場合、画面の値を送信する
            formData.append('testMessage', 'テストメッセージ');
        }
        return {
            method: 'post',
            body: formData,
            credentials: 'include'  // 認証情報の入ったリクエストを送る
        };
    }, [stateData.postTrigger]);

    const url = useMemo(() => {
        return '/#SimpleCounter#/Test';
    }, []); // URL固定なのでdeps無し

    // fetchでデータ取得する
    const data = useFetch(url, opts).data;

    // 現在の値を画面に反映
    useEffect(() => {
        // stateにデータを反映させる
        dispatch(#SimpleCounter#Module.actions.setData(data));
    }, [data]); // 第2引数の値が変化すると実行

    return (
        <Container>
            { !stateData.message && <span>Loading...</span>}
            {stateData.message &&
                <div>
                    <Row>
                        {stateData.message}
                    </Row>
                    <Row>
                        {stateData.error}
                    </Row>
                    <Row>
                        {stateData.postTrigger}
                    </Row>
                </div>
            }
            <Row>
                <Col className={'d-flex justify-content-center'}>
                </Col>
            </Row>
            <Button className={'btn btn-warning'} disabled={!stateData.isEdited} onClick={() => {
                if (window.confirm('以上の内容で更新します。よろしいですか？')) {
                    // 値が変化するとuseMemoが反応してPostする。
                    dispatch(#SimpleCounter#Module.actions.submit());
                }
            }}> 確定 </Button>
        </Container>
    );
};

export default #SimpleCounter#;

// --------------- NavMenu.tsx --------------- 
//<NavItem>
//    <NavLink tag={Link} to='/#simple-counter#'>#SimpleCounter#</NavLink>
//</NavItem>

// --------------- index.ts --------------- 
import { #SimpleCounter#Module } from './#SimpleCounter#';

    #simpleCounter#: #SimpleCounter#Module.reducer,   // △△画面の処理

// --------------- App.tsx --------------- 
import #SimpleCounter# from './components/#SimpleCounter#';

<Route path='/#simple-counter#' component={#SimpleCounter#} />
<Route path='/#simple-counter#' render={props => <#SimpleCounter# aaaa={34} {...props} />} />

// -------------------- サーバ側 --------------------
//    /// <summary>処理結果</summary>
//    public class #SimpleCounter#Result
//    {
//        /// <summary>検索した情報</summary> 
//        public #SimpleCounter#Model[] #SimpleCounter#s { get; set; }
//        
//        /// <summary>画面に表示する処理結果</summary> 
//        public string Message { get; set; }
//        
//        /// <summary>画面に表示するエラー</summary> 
//        public string Error { get; set; }
//    }

//    /// <summary>△△画面</summary>
//    [Authorize(Roles = "Administrator")]
//    public class #SimpleCounter#Controller : ControllerBase
//    {
//        public #SimpleCounter#Result Test(string testMessage)
//        {
//            var message = testMessage ?? "デフォルトメッセージ";
//            return new #SimpleCounter#Result { Message = $"これはテストです。{message}", Error = "これはエラーです。" };
//        }
//    }
]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>