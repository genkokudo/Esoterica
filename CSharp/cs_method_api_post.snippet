<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>cs_method_api_post</Title>
      <Author>Y.Toyoda</Author>
      <Description>URLを指定して値を送信し、APIからjson文字列を取得します。</Description>
      <HelpUrl>www.microsoft.com</HelpUrl>
      <Shortcut>cs_method_api_post</Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Net.Http</Namespace>
        </Import>
        <Import>
          <Namespace>Newtonsoft.Json</Namespace>
        </Import>
      </Imports>
      <Code Language="csharp" Kind="method decl" Delimiter="#">
          <![CDATA[
        // TODO:引数のdataJsonはこのように作成する(AccountとPasswordを送る場合)
        //var json = JsonConvert.SerializeObject(
        //    new { UserSettings.Account, UserSettings.Password },
        //        new JsonSerializerSettings
        //        {
        //            // nullならばJSONの項目にしない
        //            NullValueHandling = NullValueHandling.Ignore
        //        }
        //    );
        // TODO:戻り値はこのように処理する
        // JsonConvert.DeserializeObject<????Model>(result);
        // TODO:200でない場合は例外なので以下のように処理
        // var message = JsonConvert.DeserializeObject<dynamic>(e.Message).Message;
        

//        // 基本的に受け取り側はデータのクラス定義が必要だと覚えればよい
//        public class ????Model
//        {
//            public string Message { get; set; }
//        }
//        
//        // コントローラ
//        [AllowAnonymous]
//        public async Task<ActionResult> OpsCoopAsync([FromBody]LoginData data)
//        {
//            _logger.LogInformation($"処理を開始します。");
//            try
//            {
//                // TODO:処理を書くこと
//                return Ok(new { Message = "処理が完了しました。" });    // 必要ならば????Modelクラスを定義する
//            }
//            catch (Exception e)
//            {
//                _logger.LogError($"{e.Message}\n{e.StackTrace}");
//                return BadRequest(new { message = e.Message });		// BadRequestに任意のデータを載せられる（FetchAPIの時はなぜかできない。）
//            }
//        }
//
//        public class LoginData
//        {
//            public string Account { get; set; }
//            public string Password { get; set; }
//        }

        /// <summary>
        /// URLと値を指定してAPIからjson文字列を取得します
        /// </summary>
        /// <param name="url">httpで始まるURL</param>
        /// <param name="dataJson">json形式のデータ</param>
        /// <returns>json</returns>
        private async Task<string> PostAsync(string url, string dataJson)
        {
            url = url.Trim('/');
            var content = new StringContent(dataJson, Encoding.UTF8, "application/json");

            using var client = new HttpClient();
            var response = await client.PostAsync(url, content);
            if (response.StatusCode == HttpStatusCode.OK)
            {
                return await response.Content.ReadAsStringAsync();
            }
            else
            {
                var resJson = await response.Content.ReadAsStringAsync();
                var error = JsonConvert.DeserializeObject<????Model>(resJson).Message;
                Logger.LogError(error);
                throw new Exception(error);
            }
        }]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>