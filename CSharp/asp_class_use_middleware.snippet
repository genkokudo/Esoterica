<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>asp_class_use_middleware</Title>
      <Author>Y.Toyoda</Author>
      <Description>UseXxxで使用できるミドルウェアのテンプレートです。</Description>
      <HelpUrl>www.microsoft.com</HelpUrl>
      <Shortcut>asp_class_use_middleware</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>Xxx</ID>
          <ToolTip>名前Pascal</ToolTip>
          <Default>Xxx</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp" Kind="file" Delimiter="$">
  <![CDATA[using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Http.Features;
using Microsoft.Extensions.Options;
using System.IO;
using System.Threading.Tasks;

/// <summary>
/// Use$Xxx$をStartup.csで呼べるようにする拡張クラス
/// </summary>
public static class $Xxx$MiddlewareExtensions
{
    /// <summary>
    /// $Xxx$を用いて、～～できるようにします。
    /// </summary>
    /// <param name="builder"></param>
    /// <returns></returns>
    public static IApplicationBuilder Use$Xxx$(this IApplicationBuilder builder)
    {
        return builder.UseMiddleware<$Xxx$Middleware>();
    }
}

/// <summary>
/// $Xxx$を使用します。
/// </summary>
public class $Xxx$Middleware
{
    private readonly RequestDelegate _next;
    private readonly ILogger<$Xxx$Middleware> _logger;
    private readonly $Xxx$Option _options;

    // 注意！コンストラクタでScopedやSingletonクラス（DbContextとか）のインジェクションは行わないこと
    // services.ConfigureによるIOptionsはコンストラクタでインジェクションすること
    public $Xxx$Middleware(RequestDelegate next, ILogger<$Xxx$Middleware> logger)
    {
        _next = next;    // ※これは必須
        _logger = logger;
        // _options = options.Value;
    }

    public async Task InvokeAsync(HttpContext context)
    {
        // 以下のようにして、HTTP要求に対する応答処理を書く
        // context.Request～～
        // var httpContext = new AspNetCoreContext(context);

        // 次のミドルウェアを呼ぶ。これを書かないと次のapp.Useしたミドルウェアが呼ばれないので必ず書くこと。
        await _next(context);
    }
}]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>